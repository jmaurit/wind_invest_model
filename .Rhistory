coordinates(meuse.grid)<-c("x","y")
meuse.grid<-as(meuse.grid, "SpatialPixels")
image(meuse.grid, col="grey")
image(meuse.grid, col="lightgrey")
plot(meuse.sr, col="grey", add=TRUE)
plot(meuse, add=TRUE)
?image
meuse.grid
data(meuse.grid)
coordinates(meuse.grid)<-c("x","y")
meuse.grid<-as(meuse.grid, "SpatialPixels")
str(meuse.grid)
coordinates(meuse.grid)<-c("x","y")
data(meuse.grid)
coordinates(meuse.grid)<-c("x","y")
image(meuse.grid, col="grey")
meuse.grid<-as(meuse.grid, "SpatialPixels")
image(meuse.grid, col="grey")
bbox(meuse.grid)
?SpatialPixels
plot(meuse.sr, col="grey")
plot(meuse, add=TRUE)
image(meuse.grid, col="lightgrey", add=TRUE)
plot(meuse.sr, col="grey")
plot(meuse, add=TRUE)
image(meuse.grid, col="lightgrey", add=TRUE)
image(meuse.grid)
image(meuse.grid)
image(meuse.grid)
plot(meuse.sr, col="grey", add=TRUE)
plot(meuse, add=TRUE)
?SpatialPixels
?image
image(meuse.grid, col="lightgrey")
plot(meuse.sr, col="grey", add=TRUE)
plot(meuse, add=TRUE)
image(meuse.grid, col="grey")
image(meuse.grid, col=c("grey", "lightgrey"))
image(meuse.grid, col=c("lightgrey", "grey"))
plot(meuse.sr, col="grey", add=TRUE)
plot(meuse, add=TRUE)
image(meuse.grid, col=c("white", "grey"))
plot(meuse.sr, col="grey", add=TRUE)
plot(meuse, add=TRUE)
layout(matrix(c(1,2),1,2))
plot(meuse.sr, axes=TRUE)
plot(meuse.sr, axes=FALSE)
axis(1, at=c(178000 + 0:2*2000), cex.axis=.7)
axis(2, at=c(326000 + 0:3*4000), cex.axis=.7)
box()
oldpar=par(no.readonly=TRUE)
layout(matrix(c(1,2), 1, 2))
plot(meuse, axes=TRUE, cex=.6)
plot(meuse.sr, add=TRUE)
title("Sample locations")
par(mar=c(0,0,0) + .1)
par(mar=c(0,0,0,0) + .1)
plot(meuse, axes=FALSE, cex=.6)
plot(meuse, axes=FALSE, cex=.6)
oldpar=par(no.readonly=TRUE)
layout(matrix(c(1,2), 1, 2))
plot(meuse, axes=TRUE, cex=.6)
plot(meuse.sr, add=TRUE)
title("Sample locations")
par(mar=c(0,0,0,0) + .1)
plot(meuse, axes=FALSE, cex=.6)
par(oldpar)
oldpar=par(no.readonly=TRUE)
layout(matrix(c(1,2), 1, 2))
plot(meuse, axes=TRUE, cex=.6)
plot(meuse.sr, add=TRUE)
title("Sample locations")
par(mar=c(0,0,0,0) + .1)
plot(meuse, axes=FALSE, cex=.6)
par(oldpar)
par(oldpar)
oldpar=par(no.readonly=TRUE)
layout(matrix(c(1,2), 1, 2))
plot(meuse, axes=TRUE, cex=.6)
plot(meuse.sr, add=TRUE)
title("Sample locations")
par(mar=c(0,0,0,0) + .1)
plot(meuse, axes=FALSE, cex=.6)
par(oldpar)
plot(meuse.sr, add=TRUE)
box()
par(oldpar)
oldpar=par(no.readonly=TRUE)
layout(matrix(c(1,2), 1, 2))
plot(meuse, axes=TRUE, cex=.6)
plot(meuse.sr, add=TRUE)
title("Sample locations")
par(mar=c(0,0,0,0) + .1)
plot(meuse, axes=FALSE, cex=.6)
par(oldpar)
plot(meuse.sr, add=TRUE)
box()
par(oldpar)
library(sp)
getClass("Spatial")
getClass("CRS")
library(sp)
data(meuse)
coordinates(meuse)<-c("x","y")
plot(meuse)
cc<-coordinates(meuse)
m.sl<-SpatialLines(list(Lines(list(Line(cc)),ID="a")))
plot(m.sl)
title("lines")
data(meuse.riv)
meuse.1st<-list(Polygons(list(Polygon(meuse.riv)),
"meuse.riv"))
meuse.sr<-SpatialPolygons(meuse.1st)
plot(meuse.sr, col="grey")
title("polygons")
data(meuse.grid)
coordinates(meuse.grid)<-c("x","y")
meuse.grid<-as(meuse.grid, "SpatialPixels")
image(meuse.grid, col="grey")
image(meuse.grid, col=c("white", "grey"))
plot(meuse.sr, col="grey", add=TRUE)
plot(meuse, add=TRUE)
oldpar=par(no.readonly=TRUE)
layout(matrix(c(1,2), 1, 2))
plot(meuse, axes=TRUE, cex=.6)
plot(meuse.sr, add=TRUE)
title("Sample locations")
par(mar=c(0,0,0,0) + .1)
plot(meuse, axes=FALSE, cex=.6)
par(oldpar)
plot(meuse.sr, add=TRUE)
box()
par(oldpar)
layout(matrix(c(1,2),1,2))
plot(meuse.sr, axes=TRUE)
plot(meuse.sr, axes=FALSE)
axis(1, at=c(178000 + 0:2*2000), cex.axis=.7)
axis(2, at=c(326000 + 0:3*4000), cex.axis=.7)
box()
oldpar=par(no.readonly=TRUE)
layout(matrix(c(1,2), 1, 2))
plot(meuse, axes=TRUE, cex=.6)
plot(meuse.sr, add=TRUE)
title("Sample locations")
par(mar=c(0,0,0,0) + .1)
plot(meuse, axes=FALSE, cex=.6)
par(oldpar)
plot(meuse.sr, add=TRUE)
box()
par(oldpar)
plot(meuse)
plot(meuse.sr, add=TRUE)
plot(meuse)
SpatialPolygonsRescale(layout.scale.bar(), offset=locator(1), scale=1000, fill=c("transparent", "black"), plot.grid=FALSE)
text(locator(1), "0")
text(locator(1), "1 KM")
SpatialPolygonsRescale(layout.north.arrow(), offset=locator(1), scale=400, plot.gird=FALSE)
library(sp)
getClass("Spatial")
getClass("CRS")
library(sp)
data(meuse)
coordinates(meuse)<-c("x","y")
plot(meuse)
cc<-coordinates(meuse)
m.sl<-SpatialLines(list(Lines(list(Line(cc)),ID="a")))
plot(m.sl)
title("lines")
data(meuse.riv)
meuse.1st<-list(Polygons(list(Polygon(meuse.riv)),
"meuse.riv"))
meuse.sr<-SpatialPolygons(meuse.1st)
plot(meuse.sr, col="grey")
title("polygons")
data(meuse.grid)
coordinates(meuse.grid)<-c("x","y")
meuse.grid<-as(meuse.grid, "SpatialPixels")
image(meuse.grid, col="grey")
data(meuse.riv)
meuse.lst <- list(Polygons(list(Polygon(meuse.riv)), "meuse.riv"))
meuse.sr <- SpatialPolygons(meuse.lst)
plot(meuse.sr, col = "grey")
title("polygons")
def.par <- par(no.readonly = TRUE)
nc <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1], proj4string=CRS("+proj=longlat +datum=NAD27"))
rrt <- nc$SID74/nc$BIR74
brks <- quantile(rrt, seq(0,1,1/5))
cols <- grey.colors(length(brks)-1, 0.95, 0.55, 2.2)
plot(nc, col=cols[findInterval(rrt, brks, all.inside=TRUE)], axes = TRUE)
par(def.par)
library(maptools)
def.par <- par(no.readonly = TRUE)
nc <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1], proj4string=CRS("+proj=longlat +datum=NAD27"))
rrt <- nc$SID74/nc$BIR74
brks <- quantile(rrt, seq(0,1,1/5))
cols <- grey.colors(length(brks)-1, 0.95, 0.55, 2.2)
plot(nc, col=cols[findInterval(rrt, brks, all.inside=TRUE)], axes = TRUE)
library(maptools)
library(maps)
wrld <- map("world", interior=FALSE, xlim=c(-179,179), ylim=c(-89,89), plot=FALSE)
wrld_p <- pruneMap(wrld, xlim=c(-179,179))
?map
wrld <- map("world", interior=FALSE, xlim=c(-179,179), ylim=c(-89,89), plot=FALSE)
wrld_p <- pruneMap(wrld, xlim=c(-179,179))
map("USA")
map("state")
map("county")
map()
install.packages("mapdata")
library(mapdata)
str(mapdata)
mapdata
?mapdata
?mapdata
map("china")
map("japan")
map("usa")
map("rivers", add=TRUE)
map("norway")
map("world2Hires", xlim=c(0,35), ylim=c(55, 75))
map("rivers", add=TRUE)
wrld <- map("world", interior=FALSE, xlim=c(-179,179), ylim=c(-89,89), plot=FALSE)
wrld
wrld_p <- pruneMap(wrld, xlim=c(-179,179))
?pruneMap
wrld_p
map(wrld_p)
map(wrld_p[Brazil:])
map(wrld_p[Brazil])
map(wrld_p["Brazil:?"])
llCRS <- CRS("+proj=longlat +ellps=WGS84")
prj_new <- CRS("+proj=moll")
?CRS
library(rgdal)
install.packages("rgdal")
wrld_proj <- spTransform(wrld_sp, prj_new)
def.par <- par(no.readonly = TRUE)
#par(pin = c(5,3))
nc <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1], proj4string=CRS("+proj=longlat +datum=NAD27"))
# is.projected(nc)
rrt <- nc$SID74/nc$BIR74
brks <- quantile(rrt, seq(0,1,1/5))
#cols <- grey((length(brks):2)/length(brks))
# RSB quieten greys
cols <- grey.colors(length(brks)-1, 0.95, 0.55, 2.2)
#dens <- (2:length(brks))*3
#par(pin = c(4, 2.5), mar = c(2,2,1,1)+0.1)
plot(nc, col=cols[findInterval(rrt, brks, all.inside=TRUE)], axes = TRUE)
par(def.par)
pin <- par("pin")
dxy <- apply(bbox(meuse), 1, diff)
ratio <- dxy[1]/dxy[2]
par(pin=c(ratio * pin[2], pin[2]), xaxs="i", yaxs="i")
plot(meuse, pch = 1)
box()
library(gstat)
install.packages("gstat")
ata(meuse.grid)
coordinates(meuse.grid) <- c("x", "y")
gridded(meuse.grid) <- TRUE
library(gstat)
zn.idw <- krige(log(zinc) ~ 1, meuse, meuse.grid)
zn.idw
gray.colors
?gray.colors
grays = gray.colors(4, 0.55, 0.95)
image(zn.idw, col = grays, breaks=log(c(100,200,400,800,1800)))
plot(meuse.sr, add = TRUE)
plot(meuse, pch = 1, cex = sqrt(meuse$zinc)/20, add = TRUE)
legVals <- c(100, 200, 500, 1000, 2000)
legend("left", legend=legVals, pch = 1, pt.cex = sqrt(legVals)/20, bty = "n",
title = "measured")
legend("topleft", legend=c("100-200","200-400","400-800","800-1800"),
fill = grays, bty = "n", title = "interpolated")
grays = gray.colors(4, 0.55, 0.95)
image(zn.idw, col = grays, breaks=log(c(100,200,400,800,1800)))
?image
plot(meuse, pch = 1, cex = sqrt(meuse$zinc)/20, add = TRUE)
meuse
legVals <- c(100, 200, 500, 1000, 2000)
legend("left", legend=legVals, pch = 1, pt.cex = sqrt(legVals)/20, bty = "n",
title = "measured")
def.par <- par(no.readonly = TRUE)
par(mar=c(0.1,0.1,2,0.1))
cols <- grey.colors(4, 0.95, 0.55, 2.2)
#image(zn.idw, col = gray(5:8/10), breaks=log(c(100,200,400,800,1800)))
image(zn.idw, col = cols, breaks=log(c(100,200,400,800,1800)))
plot(meuse.sr, add = TRUE)
plot(meuse, pch = 1, cex = sqrt(meuse$zinc)/20, add = TRUE)
legVals <- c(100, 200, 500, 1000, 2000)
legend("left", legend=legVals, pch = 1, pt.cex = sqrt(legVals)/20, bty = "n", title="measured, ppm", cex=0.8, y.inter=0.9)
#legend("topleft", fill = gray(5:8/10), legend=c("100-200","200-400","400-800","800-1800"), bty = "n", title = "interpolated, ppm", cex=0.8, y.inter=0.9)
legend("topleft", fill = cols, legend=c("100-200","200-400","400-800","800-1800"), bty = "n", title = "interpolated, ppm", cex=0.8, y.inter=0.9)
title("measured and interpolated zinc")
library(gstat)
library(sp)
data(meuse)
coordinates(meuse) <- ~x+y
data(meuse.grid)
coordinates(meuse.grid) <- ~x+y
gridded(meuse.grid) <- T
zn <- krige(zinc~1,meuse,meuse.grid)
zn$direct <- zn$var1.pred
zn$log <- exp(krige(log(zinc)~1,meuse,meuse.grid)$var1.pred)
source('~/.active-rstudio-document', echo=TRUE)
library(lattice)
levelplot(z~x+y|name, spmap.to.lev(zn[c("direct", "log")]), asp = "iso")
spplot(zn[c("direct", "log")])
library(gstat)
library(sp)
data(meuse)
coordinates(meuse) <- ~x+y
data(meuse.grid)
coordinates(meuse.grid) <- ~x+y
gridded(meuse.grid) <- T
zn <- krige(zinc~1,meuse,meuse.grid)
zn$direct <- zn$var1.pred
zn$log <- exp(krige(log(zinc)~1,meuse,meuse.grid)$var1.pred)
library(lattice)
levelplot(z~x+y|name, spmap.to.lev(zn[c("direct", "log")]), asp = "iso")
spplot(zn[c("direct", "log")])
data(meuse)
coordinates(meuse) <- ~x+y
data(meuse.grid)
gridded(meuse.grid) <- T
library(lattice)
levelplot(z~x+y|name, spmap.to.lev(zn[c("direct", "log")]), asp = "iso")
spplot(zn[c("direct", "log")])
library(lattice)
# RSB quietening greys
print(levelplot(z~x+y|name, spmap.to.lev(zn[c("direct", "log")]), asp = "iso",
cuts=4, col.regions=grey.colors(5, 0.90, 0.50, 2.2)),
split = c(1,1,1,2), more = TRUE)
print(spplot(zn[c("direct", "log")], cuts=4,
col.regions=grey.colors(5, 0.90, 0.50, 2.2)), split = c(1,2,1,2))
dev.null <- dev.off()
print(levelplot(z~x+y|name, spmap.to.lev(zn[c("direct", "log")]), asp = "iso",
cuts=4, col.regions=grey.colors(5, 0.90, 0.50, 2.2)),
split = c(1,1,1,2), more = TRUE)
print(spplot(zn[c("direct", "log")], cuts=4,
col.regions=grey.colors(5, 0.90, 0.50, 2.2)), split = c(1,2,1,2))
?levelplot
cuts=c(0,20,50,200,500,2000)
# RSB quietening greys
grys <- grey.colors(7, 0.90, 0.50, 2.2)
print(spplot(meuse[1:4], main = "ppm", cuts=cuts, cex=.5, col.regions=grys),
split=c(1,1,2,1),more=T)
meuse$lead.st = as.vector(scale(meuse$lead))
meuse$zinc.st = as.vector(scale(meuse$zinc))
meuse$copper.st = as.vector(scale(meuse$copper))
meuse$cadmium.st = as.vector(scale(meuse$cadmium))
cuts=c(-1.2,0,1,2,3,5)
print(spplot(meuse, c("lead.st", "zinc.st", "cadmium.st", "copper.st"),
main = "standardised", cex = .5, cuts = cuts, col.regions=grys),
split=c(2,1,2,1))
library(maptools)
data(meuse.grid)
coordinates(meuse.grid) <- c("x", "y")
meuse.grid <- as(meuse.grid, "SpatialPixelsDataFrame")
im <- as.image.SpatialGridDataFrame(meuse.grid["dist"])
cl <- ContourLines2SLDF(contourLines(im))
spplot(cl)
meuse.grid
grys <- grey.colors(11, 0.90, 0.50, 2.2)
data(meuse.grid)
coordinates(meuse.grid) <- c("x", "y")
meuse.grid <- as(meuse.grid, "SpatialPixelsDataFrame")
cl = ContourLines2SLDF(contourLines(as.image.SpatialGridDataFrame(meuse.grid["dist"])))
print(spplot(cl, colorkey=list(height=0.8, width=0.6), col.regions=grys), split = c(1,1,2,2), more=TRUE)
cuts = (0:10)/10
print(spplot(meuse.grid, "dist"
, colorkey=list(labels=list(at=cuts), at=cuts), col.regions=grys
, pretty = TRUE
), split = c(2,1,2,2), more = TRUE)
meuse.grid$f = factor(meuse.grid$ffreq, labels = c("annual", "2-5 yrs", "> 5 yrs"))
print(spplot(meuse.grid, "f", colorkey=list(height=0.4, width=0.6), col.regions=grey.colors(3, 0.90, 0.50, 2.2)), split = c(1,2,2,2), more=FALSE)
dev.null <- dev.off()
grys <- grey.colors(11, 0.90, 0.50, 2.2)
data(meuse.grid)
coordinates(meuse.grid) <- c("x", "y")
meuse.grid <- as(meuse.grid, "SpatialPixelsDataFrame")
cl = ContourLines2SLDF(contourLines(as.image.SpatialGridDataFrame(meuse.grid["dist"])))
print(spplot(cl, colorkey=list(height=0.8, width=0.6), col.regions=grys), split = c(1,1,2,2), more=TRUE)
cuts = (0:10)/10
print(spplot(meuse.grid, "dist"
, colorkey=list(labels=list(at=cuts), at=cuts), col.regions=grys
, pretty = TRUE
), split = c(2,1,2,2), more = TRUE)
meuse.grid$f = factor(meuse.grid$ffreq, labels = c("annual", "2-5 yrs", "> 5 yrs"))
print(spplot(meuse.grid, "f", colorkey=list(height=0.4, width=0.6), col.regions=grey.colors(3, 0.90, 0.50, 2.2)), split = c(1,2,2,2), more=FALSE)
cl
river <- list("sp.polygons", meuse.sr)
north <- list("SpatialPolygonsRescale", layout.north.arrow(), offset = c(178750,332500),
scale = 400)
scale <- list("SpatialPolygonsRescale", layout.scale.bar(), offset = c(180200,329800), scale = 1000, fill=c("transparent","black"))
txt1 <- list("sp.text", c(180200, 329950), "0")
txt2 <- list("sp.text", c(181200, 329950), "1 km")
pts <- list("sp.points", meuse, pch = 3, col = "black")
meuse.layout <- list(river, north, scale, txt1, txt2, pts)
spplot(zn["log"], sp.layout = meuse.layout)
?list
spplot(zn["log"], sp.layout = meuse.layout)
plot(meuse)
meuse.id <- identify(coordinates(meuse))
plot(meuse)
region <- locator(type="o")
n <- length(region$x)
p <- Polygon(cbind(region$x,region$y)[c(1:n,1),], hole=FALSE)
ps <- Polygons(list(p), ID = "region")
sps <- SpatialPolygons(list(ps))
plot(meuse[!is.na(overlay(meuse,sps)),],pch=16,cex=.5,add=TRUE)
def.par <- par(no.readonly = TRUE)
"region" <-
structure(list(x = c(180335.075864401, 180788.782724475, 181041.811550285,
181416.992223039, 181443.167618812, 181111.612605681, 180718.981669079,
180291.450204778, 180291.450204778), y = c(332617.465051335,
332124.858644764, 332081.647556468, 332677.960574949, 333412.549075975,
333723.668911704, 333377.980205339, 332833.520492813, 332677.960574949
)), .Names = c("x", "y"))
"meuse.id" <-
structure(list(ind = as.integer(c(82, 106, 109, 118, 155)), pos = as.integer(c(1,
4, 4, 4, 4))), .Names = c("ind", "pos"))
layout(matrix(c(1,2), 1, 2, byrow = TRUE))
par(mar = c(0,0,1,0))
plot(meuse)
box()
text(coordinates(meuse)[meuse.id$ind,], labels=meuse.id$ind, pos=meuse.id$pos)
title("identify")
library(maptools)
prj <- CRS("+proj=longlat +datum=NAD27")
nc_shp <- system.file("shapes/sids.shp", package="maptools")[1]
nc <- readShapePoly(nc_shp, proj4string=prj)
plot(nc)
pt <- locator(type="p")
dev.null <- dev.off()
plot(nc)
pt <- locator(type="p")
print(pt)
overlay(nc, SpatialPoints(cbind(pt$x,pt$y),proj4string=prj))
print(pt)
overlay(nc, SpatialPoints(cbind(pt$x,pt$y),proj4string=prj))
?overlay
ids <- spplot(meuse, "zinc", identify=TRUE)
library(lattice)
trellis.focus("panel", column = 1, row = 1)
ids <- panel.identify()
trellis.unfocus()
rw.colors <- colorRampPalette(c("red", "white"))
image(meuse.grid["dist"], col=rw.colors(10))
library(RColorBrewer)
example(brewer.pal)
install.packages("RColorBrewer")
library(RColorBrewer)
example(brewer.pal)
library(RColorBrewer)
library(classInt)
# RSB quietening greys
pal <- grey.colors(4, 0.95, 0.55, 2.2)
#pal <- brewer.pal(4, "Greys")[2:4]
q5 <- classIntervals(meuse$zinc, n=5, style="quantile")
q5
diff(q5$brks)
install.packages("classInt")
library(classInt)
pal <- grey.colors(4, 0.95, 0.55, 2.2)
#pal <- brewer.pal(4, "Greys")[2:4]
q5 <- classIntervals(meuse$zinc, n=5, style="quantile")
q5
diff(q5$brks)
plot(q5, pal=pal)
fj5 <- classIntervals(meuse$zinc, n=5, style="fisher")
fj5
diff(fj5$brks)
?classIntervals
plot(fj5, pal=pal)
def.par <- par(no.readonly = TRUE)
oopar <- par(mar=c(3,3,3,1)+0.1, mfrow=c(1,2))
plot(q5, pal=pal, main="Quantile", xlab="", ylab="")
plot(fj5, pal=pal, main="Fisher-Jenks", xlab="", ylab="")
par(oopar)
par(def.par)
def.par <- par(no.readonly = TRUE)
oopar <- par(mar=c(1,1,3,1)+0.1, mfrow=c(1,2))
q5Colours <- findColours(q5, pal)
plot(meuse, col=q5Colours, pch=19)
points(meuse, pch=1)
box()
title(main="Quantile")
legend("topleft", fill=attr(q5Colours, "palette"), legend=names(attr(q5Colours, "table")), bty="n", cex=0.8, y.intersp=0.8)
fj5Colours <- findColours(fj5, pal)
plot(meuse, col=fj5Colours, pch=19)
points(meuse, pch=1)
box()
title(main="Fisher-Jenks")
legend("topleft", fill=attr(fj5Colours, "palette"), legend=names(attr(fj5Colours, "table")), bty="n", cex=0.8, y.intersp=0.8)
plot(meuse, col=q5Colours, pch=19)
points(meuse, pch=1)
box()
title(main="Quantile")
legend("topleft", fill=attr(q5Colours, "palette"), legend=names(attr(q5Colours, "table")), bty="n", cex=0.8, y.intersp=0.8)
plot(meuse, col=q5Colours, pch=19)
q5Colours <- findColours(q5, pal)
plot(meuse, col=q5Colours, pch=19)
legend("topleft", fill=attr(q5Colours, "palette"),
legend=names(attr(q5Colours, "table")), bty="n")
library(rgdal)
install.packages("ggplot2")
library(ggplot2)
head(diamonds)
dsmall<-diamonds[sample(nrow(diamonds),100),]
quit
q()
